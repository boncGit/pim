<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
	        http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.1.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.1.xsd"
       default-lazy-init="true">


    <description>数据及事务配置</description>

    <!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
    <context:component-scan base-package="com.watchme"><!-- base-package 如果多个，用“,”分隔 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 定义事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- 多数据源配置 -->
    <bean id="dataSource" class="com.watchme.wm.dataSource.DataSources">
        <property name="targetDataSources">
            <map>
                <entry key="PIM" value-ref="dataSourcePim"/>
                <!--<entry key="ERP" value-ref="dataSourceErp"/>-->
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSourcePim"/>
    </bean>
    <!-- 数据源配置, 使用 Druid数据库连接池 -->
    <bean id="dataSourcePim" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <!--<property name="driverClassName" value="${jdbc.driver}" />-->
        <!-- 基本属性 url、user、password -->
        <property name="url" value="jdbc:mysql://localhost:3306/ssm?characterEncoding=utf8" />
        <property name="username" value="root" />
        <property name="password" value="root" />
        <!-- 配置初始化大小、最小、最大 -->
        <!--<property name="initialSize" value="${jdbc.pool.minIdle}" />-->
        <!--<property name="minIdle" value="${jdbc.pool.minIdle}" />-->
        <!--<property name="maxActive" value="${jdbc.pool.maxActive}" />-->
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 1 FROM DUAL" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
    </bean>
    <!--<bean id="dataSourceErp" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
        <!--&lt;!&ndash; 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass &ndash;&gt;-->
        <!--<property name="driverClassName" value="com.mysql.jdbc.Driver" />-->
        <!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
        <!--<property name="url" value="jdbc:mysql://localhost:3306/ssm?characterEncoding=utf8" />-->
        <!--<property name="username" value="root" />-->
        <!--<property name="password" value="root" />-->
        <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="initialSize" value="${jdbc.pool.minIdle}" />&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="minIdle" value="${jdbc.pool.minIdle}" />&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="maxActive" value="${jdbc.pool.maxActive}" />&ndash;&gt;-->
        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000" />-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000" />-->
        <!--<property name="validationQuery" value="SELECT 1 FROM DUAL" />-->
        <!--<property name="testWhileIdle" value="true" />-->
        <!--<property name="testOnBorrow" value="false" />-->
        <!--<property name="testOnReturn" value="false" />-->
    <!--</bean>-->


 	<!-- MyBatis begin -->

    <!-- 配置MyBatis-plus的SqlSession -->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描Mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapping/*/*.xml"/>
        <!--<property name="typeAliasesPackage" value="com.baomidou.springmvc.model.*"/>-->
        <!--<property name="typeEnumsPackage" value="com.baomidou.springmvc.model.enums"/>-->
        <property name="plugins">
            <array>
                <!-- 分页插件配置 -->
                <bean id="paginationInterceptor" class="com.baomidou.mybatisplus.plugins.PaginationInterceptor">
                </bean>
            </array>
        </property>
        <!-- 配置MyBatis的配置的文件 -->
        <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
        <!-- 别名处理 -->
        <!--<property name="typeAliasesPackage" value="com.watchme"></property>-->
        <!-- 注入MP的全局策略配置  -->
        <property name="globalConfig"  ref="globalConfiguration"></property>
    </bean>

    <!-- MP的全局策略配置 -->
    <bean id="globalConfiguration" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
        <!-- 在2.3版本以后，dbColumnUnderline 默认值就是true,驼峰命名转换为下划线命名 user_name对应userName -->
        <property name="dbColumnUnderline" value="true"></property>

        <!--
         全局的主键策略
        省去了@TableId(value = "id", type = IdType.AUTO)为主键策略
        -->
        <!-- <property name="idType" value="0"></property> -->

        <!--
        全局的表前缀策略配置
        省略了@TableName("employee") ，如果你的表名为bt1_user
        -->
        <!-- <property name="tablePrefix" value="tbl_"></property> -->
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 自动扫描 com.watchme.mapper下的interface,并加入IOC容器 -->
        <property name="basePackage" value="com.watchme.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>


    <!-- MyBatis end -->

    <!-- 加载配置属性文件 -->
    <!--<beans profile="production">-->
        <!--<context:property-placeholder ignore-unresolvable="true" location="classpath*:/db-production.properties" />-->
    <!--</beans>-->
    <beans profile="test">
        <context:property-placeholder ignore-unresolvable="true" location="classpath*:/db-test.properties" />
    </beans>

</beans>